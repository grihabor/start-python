"""
Краткое содержание

list(), [] - создание списка
len() - длина списка
list[] - обращение к элементам списка
list.append() - добавление элемента в конец
"""

### list(), []

# Для хранения большого количества данных неудобно использовать отдельные объекты
# типа 'int' или 'float'. Чтобы хранить набор объектов, в питоне есть несколько встроенных
# структур данных. Одна из них - список

my_list = [1, 'string', 3.14]

# В этом примере мы создаем список из 3х элементов
# Заметим, что типы у них могут быть разные

# Тот же список можно создать с помощью list()

my_list = list(1, 'string', 3.14)

# Еще примеры:

empty_list = [] # пустой список
matrix = [[1, 2], [3, 4]] # список списков (двумерный список)

### len(list)

# Чтобы получить длину списка (количество элементов) используйте len()

my_list = [1, 'string', 3.14]
print(len(my_list)) # напечатает 3

### list[]

# Чтобы обращаться к отдельным элементам списка используйте оператор []

my_list = [1, 'string', 3.14]
print(my_list[0]) # напечатает 1
print(my_list[1]) # напечатает string
print(my_list[2]) # напечатает 3.14

# Заметим, что нумерация элементов начинается с 0, а не с 1

# Чтобы получить часть списка используйте list[start:end:step]

# Первое число - индекс элемента, с которого начинать (без указания - с края списка)
# Второе число - индекс первого элемента, который уже не будет включен (без указания - с края списка)
# Третье число - шаг, с которым брать элементы (без указания - 1)

# Примеры:

my_list = [1, 'string', 3.14, 'wtf']
print(my_list[1:3]) # ['string', 3.14]
print(my_list[:2]) # [1, 'string']
print(my_list[2:]) # [3.14, 'wtf']
print(my_list[:]) # [1, 'string', 3.14, 'wtf']
print(my_list[::-1]) # ['wtf', 3.14, 'string', 1]
print(my_list[1::2]) # ['string', 'wtf']

### list.append()

# Чтобы добавить элемент в конец списка используйте append()

my_list = [1, 'string', 3.14]
my_list.append('wtf')
print(my_list) # [1, 'string', 3.14, 'wtf']

### list() + list()

# При сложении списков получается новый список, который содержит элементы первых двух

one = [1, 'one']
two = [2, 'two']
print(one + two) # [1, 'one', 2, 'two']

### list.extend()

# Чтобы добавить элементы второго списка в конец первого используйте extend()

one = [1, 'one']
two = [2, 'two']
one.extend(two)
print(one) # [1, 'one', 2, 'two']

# Зачем нужен extend, если уже есть сложение строк?
# Разница заключается в том, что extend меняет уже существующий список, в то время как сложение создает новый список

# До этого момента мы сталкивались только с неизменяемыми объектами типов 'int', 'float' или 'str'
# Все операции создавали новые объекты, поэтому об этом можно было не задумываться, однако со списками это не так

# Посмотрим на такой пример:

mylist = ['what', 'is', 'going on']
wtf = mylist
wtf[1] = 'the'
wtf[2] = 'foo'
print(mylist) # ['what', 'the', 'foo']

# Почему наш список изменился?
# Все потому что у нас не создалась копия списка
# В строчке wtf = mylist нашему списку просто присваивается еще одно имя wtf, поэтому обращаясь к элементам wtf, мы меняем все тот же список

# Если мы хотим создать новый список, нужно сделать немного по-другому

# Способ 1

mylist = ['what', 'is', 'going on']
wtf = list(mylist[0], 'the', 'foo')
print(wtf) # ['what', 'the', 'foo']
print(mylist) # ['what', 'is', 'going on']

# Способ 2

mylist = ['what', 'is', 'going on']
wtf = mylist[:1] + ['the', 'foo']
print(wtf) # ['what', 'the', 'foo']
print(mylist) # ['what', 'is', 'going on']

# Способ 3

mylist = ['what', 'is', 'going on']
wtf = list(mylist)
wtf[1] = 'the'
wtf[2] = 'foo'
print(wtf) # ['what', 'the', 'foo']
print(mylist) # ['what', 'is', 'going on']

# Способ 4

mylist = ['what', 'is', 'going on']
wtf = mylist[:]
wtf[1] = 'the'
wtf[2] = 'foo'
print(wtf) # ['what', 'the', 'foo']
print(mylist) # ['what', 'is', 'going on']

