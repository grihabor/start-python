"""
Краткое содержание

for - оператор цикла
str() * int() - повторение строки
str() + str() - конкатенация (склеивание) строк
print('', end=' ') - параметр end для контроля поведения print
str() - явное приведение к строковому типу
"""

# Цикл - это некоторая последовательность операций, которая повторяется несколько раз
# Эти повторяющиеся операции называются телом цикла 

# Циклы - основополагающая часть программирования: одна из причин написания программ 
# и развития IT индустрии заключается в том, что людям просто лень выполнять огромное 
# количество однотипных действий. Куча примеров: посчитать количество слов в тексте, 
# предсказать огромное количество факторов на бирже, найти ближайший автобус на карте, 
# найти нужный сайт в базе, расчитать кратчайший путь до дома - везде нужно выполнить 
# одни и те же действия некоторое количество раз.

# Все уже поняли, что циклы важны. Как же это написать на питоне?

### for

for i in range(3):
    print('Hi!')
    
# Это очень простой пример, можно даже догадаться, что Hi! напечатается 3 раза
# Давайте разберемся, что же такое i в этом примере. Попробуем вот что:

for i in range(3):
    print(i)
    
# Думаю теперь стало понятно, что эта переменная перебирает все значения 
# от 0 до 2 включительно

# Перепишем программу без цикла, чтобы точно понимать, что происходит:

# Итерация 0
i = 0
print(i)
# Итерация 1
i = 1
print(i)
# Итерация 2
i = 2
print(i)

#** Выполните первую часть задания

### str() * int()

# При умножении строки на число n получается новая строка, которая состоит из n повторений 
# старой строки:

print('wtf' * 5)

#** Выполните вторую часть задания

### str() + str()

# При сложении двух строк получается новая строка, в которой началом является первая строка, а концом - вторая
# Эта операция также называется конкатенация строк

print('Hello, ' + 'World!')

# Умножение строки на число можно реализовать через сложение строк и цикл:

s = 'wtf' # строка, которую мы будем повторять
result = '' # пустая строка, в которой будет храниться результат
for i in range(5):
    result = result + s
print(result)

# Давайте внимательно посмотрим, что происходит в этом примере

# 1) связываем нашу строку с именем s
# 2) заводим имя result для хранения промежуточных и конечного результатов
# 3) в цикле:
#     1) складываем то, что лежит в result с тем, что лежит в s
#     2) новую строку связываем с result, так что предыдущее значение result теряется
# 4) печатаем конечное значение result

# Запишем эквивалентную программу без цикла:

## Начальная инициализация
s = 'wtf'
result = ''
## Итерация цикла 0
i = 0
result = result + s # '' + 'wtf'
# в result теперь лежит 'wtf'
## Итерация цикла 1
i = 1
result = result + s # 'wtf' + 'wtf'
# в result теперь лежит 'wtfwtf'
## Итерация цикла 2
i = 2
result = result + s # 'wtfwtf' + 'wtf'
# в result теперь лежит 'wtfwtfwtf'
## Итерация цикла 3
i = 3
result = result + s # 'wtfwtfwtf' + 'wtf'
# в result теперь лежит 'wtfwtfwtfwtf'
## Итерация цикла 4
i = 4
result = result + s # 'wtfwtfwtfwtf' + 'wtf'
# в result теперь лежит 'wtfwtfwtfwtfwtf'
print(result) # напечатает 'wtfwtfwtfwtfwtf'

# Можно заметить, что здесь не используется значение i, однако при выполнении заданий
# оно пригодится

# Уже из такого маленького примера понятно, что циклы значительно упрощают жизнь
# В питоне очень много возможностей для удобной и логичной реализации повторений
# Их все мы обязательно посмотрим и будем использовать в нашем коде

### print('', end=' ')

# Порой бывает удобно, чтобы функция print не начинала новую строку, а оставалась на той же
# Для этого есть параметр end (англ. конец), который определяет, какая строка будет напечатана после выполнения print()
# По умолчанию, end равен '\n'
# Это не 2 символа, а один специальный. Он обозначает новую строку, поэтому содержит n (англ. new line - новая строка)

# Примеры:

for i in range(5):
    print('x', end= ' ')

# Этот код напечатает 'x x x x x '

### str()

# Если вы сейчас попытаетесь выполнить следующее задание, то столкнетесь с тем,
# что питон начнет ругаться примерно так:

# TypeError: Can't convert 'int' object to str implicitly

# Попробуем решить проблему. Что будет, если сложить строку с целым числом?

a = 'wtf' + '5' # 'wtf5'
b = 'wtf' + 5   # ошибка!

# Если вы попробовали запустить этот код, то словили точно ту же ошибку на 2 строчке
# Она говорит нам, что мы не можем неявно использовать объект типа 'int'
# в качестве объекта 'str'
# Иными словами мы можем складывать только строку со строкой, но не можем складывать 
# строку с целым числом

# Чтобы решить эту проблему нужно явным образом превратить число в строку:

b = 'wtf' + str(5) # 'wtf5'

#** Теперь можно доделывать задания!

